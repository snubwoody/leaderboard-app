// @generated by protobuf-ts 2.10.0 with parameter long_type_string
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import { Empty } from "./common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message auth.User
 */
export interface User {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional string email = 2;
     */
    email?: string;
    /**
     * The date the user was created
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: optional string user_name = 4;
     */
    userName?: string;
    /**
     * @generated from protobuf field: optional string phone_number = 6;
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: bool is_anonymous = 7;
     */
    isAnonymous: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("auth.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_anonymous", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.createdAt = "";
        message.isAnonymous = false;
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* optional string user_name */ 4:
                    message.userName = reader.string();
                    break;
                case /* optional string phone_number */ 6:
                    message.phoneNumber = reader.string();
                    break;
                case /* bool is_anonymous */ 7:
                    message.isAnonymous = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string email = 2; */
        if (message.email !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* optional string user_name = 4; */
        if (message.userName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.userName);
        /* optional string phone_number = 6; */
        if (message.phoneNumber !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.phoneNumber);
        /* bool is_anonymous = 7; */
        if (message.isAnonymous !== false)
            writer.tag(7, WireType.Varint).bool(message.isAnonymous);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.User
 */
export const User = new User$Type();
/**
 * @generated ServiceType for protobuf service auth.Auth
 */
export const Auth = new ServiceType("auth.Auth", [
    { name: "SignInAnonymously", options: {}, I: Empty, O: User }
]);
