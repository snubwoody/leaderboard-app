// @generated by protobuf-ts 2.10.0 with parameter long_type_string
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Auth } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { User } from "./auth";
import type { Empty } from "./common";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service auth.Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: SignInAnonymously(common.Empty) returns (auth.User);
     */
    signInAnonymously(input: Empty, options?: RpcOptions): UnaryCall<Empty, User>;
}
/**
 * @generated from protobuf service auth.Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SignInAnonymously(common.Empty) returns (auth.User);
     */
    signInAnonymously(input: Empty, options?: RpcOptions): UnaryCall<Empty, User> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, User>("unary", this._transport, method, opt, input);
    }
}
